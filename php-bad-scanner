#!/usr/bin/env php
<?php

class FileFinder {
  protected $callback;
  function __construct($callback) {
    $this->callback = $callback;
  }
  function run($dir) {
    $d = dir($dir);
    $entries = array();
    while (false !== ($entry = $d->read())) {
      $entries[] = $entry;
    }
    $d->close();
    foreach ($entries as $entry) {
      $fullname = $dir."/".$entry;
      if (is_dir($fullname) && $entry !== '.' && $entry !== '..') {
        $this->run($fullname);
      } elseif (is_file($fullname)) {
        $this->apply($fullname);
      }
    }
  }
  protected function apply($fullname) {
    call_user_func($this->callback, $fullname);
  }
}

class TypedFileFinder extends FileFinder {
  protected $pattern;
  protected $callback;
  function __construct($pattern, $callback) {
    $this->pattern = $pattern;
    $this->callback = $callback;
  }
  protected function apply($fullname) {
    if (preg_match($this->pattern, $fullname)) {
      call_user_func($this->callback, $fullname);
    }
  }
}

class PhpSourceScanner {
  protected $filename;
  protected $input;
  function __construct($filename) {
    $this->filename = $filename;
  }
  protected function init() {
    $this->line = 1;
    $this->col = 1;
    $this->depth = 0;
    $this->prelude = false;
    $this->input = str_replace("\r\n", "\n", file_get_contents($this->filename));
    $this->lines = explode("\n", $this->input);
    $this->tokens = token_get_all($this->input);
  }
  function next() {
    if (is_null($this->input)) {
      $this->init();
    }
    if (count($this->tokens) === 0) {
      return null;
    }
    $token = array_shift($this->tokens);
    if (is_array($token)) {
      list($token, $text) = $token;
    } else if (is_string($token)) {
      $text = $token;
    }
    $tmp = $text;
    // update line count
    $numNewLines = substr_count($tmp, "\n");
    if (1 <= $numNewLines) {
      // have new lines, add them in
      $this->line += $numNewLines;
      $this->col  =  1;

      // skip to right past the last new line, as it won't affect the column position
      $tmp = substr($tmp, strrpos($tmp, "\n") + 1);
      if ($tmp === false) {
        $tmp = '';
      }
    }
    // update column count
    $this->col += strlen($tmp);
    if ($token === T_CURLY_OPEN || $token === T_DOLLAR_OPEN_CURLY_BRACES || $text === '{') {
      ++$this->depth;
      $this->prelude = false;
    } elseif ($text == '}') {
      --$this->depth;
    }
    if ($token === T_FUNCTION) {
      $this->prelude = true;
    }
    return array($token, $text);
  }
  function prelude() {
    return $this->prelude;
  }
  function depth() {
    return $this->depth;
  }
  function lineNumber() {
    return $this->line;
  }
  function columnNumber() {
    return $this->col;
  }
  function fileName() {
    return $this->filename;
  }
  function line() {
    return $this->lines[$this->line - 1];
  }
}

class ComboFinder {
  protected $finders;
  function __construct($finders) {
    $this->finders = $finders;
  }
  static function bindArray($args) {
    return array(new self($args), 'apply');
  }
  static function bind() {
    return array(new self(func_get_args()), 'apply');
  }
  function apply($value) {
    $scanner = new PhpSourceScanner($value);
    foreach ($this->finders as $finder) {
      $finder->init();
    }
    while ($token = $scanner->next()) {
      foreach ($this->finders as $finder) {
        $finder->acceptNext($scanner, $token);
      }
    }
  }
}

class ApplicationStateFinder {
  protected $printer;
  function __construct($printer) {
    $this->printer = $printer;
  }
  function init() {
    $this->scope = false;
  }
  function acceptNext($scanner, $token) {
    $rule = null;
    if ($token[0] === T_EXIT) {
      $rule = 'APPLICATIONSTATE:EXIT';
    } elseif ($token[0] === T_STRING) {
      if (!$this->scope) {
        $fname = strtolower($token[1]);
        if ($fname === 'header') {
          $rule = 'APPLICATIONSTATE:HEADER';
        } elseif ($fname === 'session_start') {
          $rule = 'APPLICATIONSTATE:SESSION';
        } elseif ($fname === 'setrawcookie' || $fname === 'setcookie') {
          $rule = 'APPLICATIONSTATE:COOKIE';
        }
      }
      $this->scope = false;
    } elseif ($token[0] === T_PAAMAYIM_NEKUDOTAYIM || $token[0] === T_OBJECT_OPERATOR) {
      $this->scope = true;
    }
    if ($rule) {
      $this->printer->printResult($scanner->fileName(), $scanner->lineNumber(), $scanner->columnNumber(), strlen($token[1]), $rule, $scanner->line());
    }
  }
}

class GlobalFinder {
  protected $printer;
  function __construct($printer) {
    $this->printer = $printer;
  }
  function init() {
    $this->paamayim = false;
  }
  function acceptNext($scanner, $token) {
    $rule = null;
    if ($token[0] === T_GLOBAL) {
      $rule = 'GLOBAL:KEYWORD';
    } elseif ($token[0] === T_VARIABLE && $token[1] === '$GLOBALS') {
      $rule = 'GLOBAL:SUPER';
    } elseif ($token[0] === T_VARIABLE && !$this->paamayim && !$scanner->prelude() && $scanner->depth() === 0) {
      $rule = 'GLOBAL:IMPLICIT';
    }
    $this->paamayim = $token[0] === T_PAAMAYIM_NEKUDOTAYIM;
    if ($rule) {
      $this->printer->printResult($scanner->fileName(), $scanner->lineNumber(), $scanner->columnNumber(), strlen($token[1]), $rule, $scanner->line());
    }
  }
}

class StaticFinder {
  protected $printer;
  function __construct($printer) {
    $this->printer = $printer;
  }
  function init() {
    $this->parent = false;
    $this->self = false;
    $this->paamayim = false;
    $this->found = null;
  }
  function acceptNext($scanner, $token) {
    $rule = null;
    if ($this->found && $token[1] === '(') {
      $this->printer->printResult($scanner->fileName(), $this->found[0], $this->found[1], $this->found[2], 'STATIC:CALL', $this->found[3]);
    }
    if ($token[0] === T_STRING && $this->paamayim && !$this->parent && !$this->self) {
      $this->found = array(
        $scanner->lineNumber(),
        $scanner->columnNumber(),
        strlen($token[1]),
        $scanner->line());
    } elseif ($token[0] === T_VARIABLE && $this->paamayim && !$this->parent && !$this->self) {
      $this->printer->printResult($scanner->fileName(), $scanner->lineNumber(), $scanner->columnNumber(), strlen($token[1]), 'STATIC:REFERENCE', $scanner->line());
      $this->found = null;
    } else {
      $this->found = null;
    }
    $this->paamayim = $token[0] === T_PAAMAYIM_NEKUDOTAYIM;
    if (!$this->paamayim) {
      $this->parent = $token[0] === T_STRING && strtolower($token[1]) === 'parent';
      $this->self = $token[0] === T_STRING && strtolower($token[1]) === 'self';
    }
  }
}

class HackFinder {
  protected $printer;
  function __construct($printer) {
    $this->printer = $printer;
  }
  function init() {
  }
  function acceptNext($scanner, $token) {
    $rule = null;
    if ($token[0] === T_STRING && $token[1] === '@') {
      $rule = 'HACK:SUPRESSED';
    } elseif ($token[0] === T_DECLARE) {
      $rule = 'HACK:DECLARE';
    } elseif ($token[0] === T_HALT_COMPILER) {
      $rule = 'HACK:HALT_COMPILER';
    }
    if ($rule) {
      $this->printer->printResult($scanner->fileName(), $scanner->lineNumber(), $scanner->columnNumber(), strlen($token[1]), $rule, $scanner->line());
    }
  }
}

class ResultPrinter {
  protected $path;
  protected $showCode = true;
  protected $color = false;
  protected $summary = false;
  protected $rulesShow = array();
  protected $rulesHide = array();
  function __construct($path) {
    $this->path = $path;
  }
  function setPath($path) {
    $this->path = $path;
  }
  function path() {
    return $this->path;
  }
  function setSummary($enabled = true) {
    $this->summary = $enabled;
  }
  function setShowCode($enabled = true) {
    $this->showCode = $enabled;
  }
  function setColor($enabled = true) {
    $this->color = $enabled;
  }
  function showRule($rule) {
    $this->rulesShow[] = '^'.preg_quote(strtoupper($rule));
  }
  function hideRule($rule) {
    $this->rulesHide[] = '^'.preg_quote(strtoupper($rule));
  }
  function printResult($fileName, $lineNumber, $columnNumber, $length, $rule, $text) {
    if (count($this->rulesShow) > 0 && !preg_match('/'.implode('|', $this->rulesShow).'/', $rule)) {
      return;
    }
    if (count($this->rulesHide) > 0 && preg_match('/'.implode('|', $this->rulesHide).'/', $rule)) {
      return;
    }
    $fileName = preg_replace('/^'.preg_quote($this->path."/", '/').'/', '', $fileName);
    if ($this->summary) {
      $this->summarise($fileName, $rule);
    } elseif ($this->color) {
      print $this->formatColor($fileName, $lineNumber, $columnNumber, $length, $rule, $text);
    } else {
      print $this->formatPlain($fileName, $lineNumber, $columnNumber, $length, $rule, $text);
    }
  }
  function summarise($fileName, $rule) {
    if (!isset($this->summary_data[$fileName])) {
      $this->summary_data[$fileName] = array();
    }
    if (!isset($this->summary_data[$fileName][$rule])) {
      $this->summary_data[$fileName][$rule] = 0;
    }
    $this->summary_data[$fileName][$rule]++;
  }
  function tally() {
    if ($this->summary) {
      foreach ($this->summary_data as $fileName => $violations) {
        print $fileName . ":\n";
        $total = 0;
        foreach ($violations as $rule => $count) {
          $total += $count;
          print "    " . str_pad($rule, 30) . " " . str_pad($count, 3, " ", STR_PAD_LEFT) . "\n";
        }
        file_get_contents($fileName);
        $total_lines = substr_count(str_replace("\r\n", "\n", file_get_contents($fileName)), "\n");
        print "    " . str_pad("Violations per Lines of Code", 30) . " " . str_pad($total . "/" . $total_lines, 10);
        print round(100 * ($total / $total_lines)) . "%\n";
      }
    }
  }
  protected function formatPlain($fileName, $lineNumber, $columnNumber, $length, $rule, $text) {
    if ($this->showCode) {
      $formatted = ltrim($text);
      return "{$rule} in {$fileName} at line {$lineNumber}\n    {$formatted}\n";
    } else {
      return "{$rule} in {$fileName} at line {$lineNumber}\n";
    }
  }
  protected function formatColor($fileName, $lineNumber, $columnNumber, $length, $rule, $text) {
    $columnNumber = ($columnNumber - 1) - $length;
    $before = substr($text, 0, $columnNumber);
    $match = substr($text, $columnNumber, $length);
    $after = substr($text, ($columnNumber) + $length);
    if ($this->showCode) {
      $formatted = ltrim($before)."\033[31m".$match."\033[0m".$after;
      return "\033[33m{$rule}\033[35m in \033[34m{$fileName}\033[35m at line {$lineNumber}\033[0m\n    {$formatted}\n";
    } else {
      return "\033[33m{$rule}\033[35m in \033[34m{$fileName}\033[35m at line {$lineNumber}\033[0m\n";
    }
  }
}

error_reporting(E_ALL);
$printer = new ResultPrinter(getcwd());

$args = $_SERVER['argv'];
array_shift($args);
foreach ($args as $arg) {
  if ($arg == '--color') {
    $printer->setColor(true);
  } elseif ($arg == '--no-color') {
    $printer->setColor(false);
  } elseif ($arg == '--summary') {
    $printer->setSummary(true);
  } elseif ($arg == '--no-static') {
    $printer->hideRule('STATIC:');
  } elseif ($arg == '--no-global') {
    $printer->hideRule('GLOBAL:');
  } elseif ($arg == '--no-application-state') {
    $printer->hideRule('APPLICATIONSTATE:');
  } elseif ($arg == '--code') {
    $printer->setShowCode(true);
  } elseif ($arg == '--no-code') {
    $printer->setShowCode(false);
  } elseif ($arg == '--help') {
    echo "php bad scanner. Audits PHP code for testability.\n";
    echo "USAGE: ".basename(__FILE__)." [OPTIONS] [PATH]\n";
    echo "  OPTIONS:\n";
    echo "    --summary        Print a summary of the results.\n";
    echo "    --color          Print results in color.\n";
    echo "    --no-color       Don't use ansi color in output (DEFAULT).\n";
    echo "    --code           Display the offending line of code in the results (DEFAULT).\n";
    echo "    --no-code        Don't display the offending line of code in the results.\n";
    echo "    --no-static      Disable rules for static symbols.\n";
    echo "    --no-global      Disable rules for global variables.\n";
    echo "    --no-application-state\n";
    echo "                     Disable rules for application state.\n";
    echo "    --show=RULE      Only show these rule(s). Multiple rules can be separated by a comma.\n";
    echo "    --hide=RULE      Don't show these rule(s). Multiple rules can be separated by a comma.\n";
    echo "    --help           Show this help.\n";
    echo "  PATH defaults to current working dir.\n";
    exit;
  } elseif (preg_match('/^--show=[\'"]?(.+)[\'"]?$/', $arg, $mm)) {
    foreach (explode(',', $mm[1]) as $rule) {
      $printer->showRule($rule);
    }
  } elseif (preg_match('/^--hide=[\'"]?(.+)[\'"]?$/', $arg, $mm)) {
    foreach (explode(',', $mm[1]) as $rule) {
      $printer->hideRule($rule);
    }
  } elseif (preg_match('/^--[a-z]+/', $arg)) {
    throw new Exception("Unknown argument '$arg'");
  } else {
    $printer->setPath(realpath($arg));
  }
}

$finder = ComboFinder::bind(
  new StaticFinder($printer),
  new GlobalFinder($printer),
  new ApplicationStateFinder($printer),
  new HackFinder($printer));

if (is_file($printer->path())) {
  call_user_func($finder, $printer->path());
} else {
  $files = new TypedFileFinder('/\.(php|inc)$/', $finder);
  $files->run($printer->path());
}
$printer->tally();
